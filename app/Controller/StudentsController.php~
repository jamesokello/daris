<?php
App::uses('Folder','Utility');
App::uses('Files','Utility');
class StudentsController extends AppController {
    public $helpers = array('Html', 'Form', 'Js');
    public $components = array('Session');

    public function index() {
	$students = $this->Student->find(
				      'all', 
				      array('order' => 'Student.id DESC', 'group' => 'Student.id')
					);
	$this->set('students', $students);
    }
    
    public function checkifnumber(){
	/*$ajax1 = $this->request->data['Student']['picturenumber'];
	//$ajax = $ajax + 1;
	//$ajax1 = $ajax;
	if($ajax1 != null){
	      $this->set('ajax1', $ajax1);
	}else{
	      $this->set('ajax1', "here we are");
	}
	$this->layout = 'ajax';
	$this->render('checkifnumber');
	*/
    }

    public function add_olevel() {
	
	if ($this->request->is('post')) {
	    $this->Student->create();
	    
	    if($this->request->data['Student']['picture'] != ""){
		$encoded_data = $this->request->data['Student']['picture'];
		$binary_data = base64_decode($encoded_data);

		// save to server (beware of permissions)
		$result = file_put_contents( 'img/studentpics/'.$this->request->data['Student']['picturenumber'].'.jpg', $binary_data );
		$this->request->data['Student']['picture'] = "";

	    }
	    if ($this->Student->saveAssociated($this->request->data)) {
		$this->Session->setFlash(__('The student was sucessfully added to the database'));
		return $this->redirect(array('action' => 'index'));
	    }else{
		//$this->Session->setFlash(__('Unable to add the student to the database'));
	    }
	}
	
	$this->loadModel('Number');
	$currentnumber = $this->Number->findById(1);
	if($currentnumber['Number']['currentyear'] != date('Y')){
	    $newnumbertobeused = 1;
	    $newnumbertobeused = sprintf("%04d", $newnumbertobeused);
	    $data =  array('id' => 1, 'lastnumberused' => $newnumbertobeused, 'currentyear' => date('Y'));
	    $this->Number->save($data);
	    $this->set('lastnumberused', 1);
	    $this->set('currentyear', date());
	}else{
	    $newnumbertobeused = $currentnumber['Number']['lastnumberused'] + 1;
	    $newnumbertobeused = sprintf("%04d", $newnumbertobeused);
	    $data =  array('id' => 1, 'lastnumberused' => $newnumbertobeused);
	    $this->Number->save($data);
	    $this->set('lastnumberused', $newnumbertobeused);
	    $this->set('currentyear', date());
	}
	
    }

    public function add_alevel() {
	
	if ($this->request->is('post')) {
	    $this->Student->create();
	    
	    if($this->request->data['Student']['picture'] != ""){
		$encoded_data = $this->request->data['Student']['picture'];
		$binary_data = base64_decode($encoded_data);

		// save to server (beware of permissions)
		$result = file_put_contents( 'img/studentpics/'.$this->request->data['Student']['picturenumber'].'.jpg', $binary_data );
		$this->request->data['Student']['picture'] = "";

	    }
	    if ($this->Student->saveAssociated($this->request->data)) {
		$this->Session->setFlash(__('The student was sucessfully added to the database'));
		return $this->redirect(array('action' => 'index'));
	    }else{
		//$this->Session->setFlash(__('Unable to add the student to the database'));
	    }
	}
	
	$this->loadModel('Number');
	$currentnumber = $this->Number->findById(1);
	if($currentnumber['Number']['currentyear'] != date('Y')){
	    $newnumbertobeused = 1;
	    $newnumbertobeused = sprintf("%04d", $newnumbertobeused);
	    $data =  array('id' => 1, 'lastnumberused' => $newnumbertobeused, 'currentyear' => date('Y'));
	    $this->Number->save($data);
	    $this->set('lastnumberused', 1);
	    $this->set('currentyear', date('Y'));
	}else{
	    $newnumbertobeused = $currentnumber['Number']['lastnumberused'] + 1;
	    $newnumbertobeused = sprintf("%04d", $newnumbertobeused);
	    $data =  array('id' => 1, 'lastnumberused' => $newnumbertobeused);
	    $this->Number->save($data);
	    $this->set('lastnumberused', $newnumbertobeused);
	    $this->set('currentyear', date('Y'));
	}
	
    }

    public function edit($id = null) {
	if (!$id){
	    throw new NotFoundException(__('Invalid Student'));
	}
	$students = $this->Student->findById($id);
	if (!$students){
	    throw new NotFoundException(__('Invalid Student'));
	}
	if ($this->request->is(array('post', 'put'))){
	    $this->Student->id = $id;

	    if($this->request->data['Student']['picture'] != ""){
		$encoded_data = $this->request->data['Student']['picture'];
		$binary_data = base64_decode($encoded_data);

		//first delete the file from the specified location if it exists
		$path = "img/studentpics/".$this->request->data['Student']['picturenumber'].".jpg";
		if(file_exists($path) == true){
		    unlink($path);
		}
		// save to server (beware of permissions)	
		$result = file_put_contents( 'img/studentpics/'.$this->request->data['Student']['picturenumber'].'.jpg', $binary_data );
		$this->request->data['Student']['picture'] = "";
	    }

	    if ($this->Student->saveAssociated($this->request->data)){
		$this->Session->setFlash(__('Records for %s %s, Registration number: %s have been been updated.',
					    $this->request->data['Student']['surname'], 
					    $this->request->data['Student']['othernames'], 
					    $this->request->data['Student']['registrationnumber']));
		return $this->redirect(array('action' => 'index'));
	    }
	    $this->Session->setFlash(__('Unable to update Student Records.'));
	}

	if (!$this->request->data){
	    $this->request->data = $students;
	}

	if(file_exists("img/studentpics/".$students['Student']['picturenumber'].".jpg") == true){
	    $webcampic = $students['Student']['picturenumber'];
	    $this->set('webcampic', $students['Student']['picturenumber']);
	}else{
	    $webcampic = false;
	    $this->set('webcampic', $webcampic);
	}
    }

    public function delete($id){
	if ($this->request->is('get')){
	    throw new MethodNotAllowedException();
	}
	$students = $this->Student->findById($id);
	$path = "img/studentpics/".$students['Student']['picturenumber'].".jpg";
	if(file_exists($path) == true){
	    unlink($path);
	}
	if ($this->Student->delete($id)){
		$this->Session->setFlash(__('Records for %s %s, Student number: %s have been been deleted.',
					    $students['Student']['surname'], 
					    $students['Student']['othernames'], 
					    $students['Student']['picturenumber']));
	    return $this->redirect(array('action' => 'index'));
	}else{
	    $this->Session->setFlash(__('Had a slight problem trying to delete Student Records.'));
	    return $this->redirect(array('action' => 'index'));
	}
    }
}
?>

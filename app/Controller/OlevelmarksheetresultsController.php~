<?php
App::uses('Folder','Utility');
App::uses('Files','Utility');
App::uses('AppController', 'Controller');
class OlevelmarksheetresultsController extends AppController {
    public $helpers = array('Paginator','Html', 'Form', 'Js');
    public $components = array('Paginator','Session','PhpExcel.PhpExcel');
    
    // load the PhpExcel component - case is important
    // public $components = array('PhpExcel.PhpExcel');

    public function index() {
	/*
	$this->Paginator->settings = array(
	  'Student' => array (
	    'paramType' => 'querystring',
	    'limit' => 100,
	    'order' => array(
	      'Student.id' => 'desc'
	    )
	  )
	);
	$this->set('students', $this->Paginator->paginate());
	/* $students = $this->Student->find(
				      'all', 
				      array('order' => 'Student.id DESC', 'group' => 'Student.id')
					);
	$this->set('students', $students);
	*/
    }
    
    public function search() {
      /*
      if ($this->request->is('put') || $this->request->is('post')) {
	// poor man's Post Redirect Get behavior
	return $this->redirect(array(
	  '?' => array(
	    'q' => $this->request->data('Student.searchQuery')
	  )
	));
      }
      $this->Student->recursive = 0;
      $searchQuery = $this->request->query('q');
      $this->Paginator->settings = array(
	'Student' => array(
	'findType' => 'search',
	'searchQuery' => $searchQuery
	)
      );
      $this->set('students', $this->Paginator->paginate());
      $this->set('searchQuery', $searchQuery);
      $this->render('index');
      */
    }
    
    public function entermarks(){
    
    	if ($this->request->is('post')) {
    	  if($this->request->data['criterea'] === "singlestudent"){
	      $registrationnumber = $this->request->data['registrationnumber'];
	      $subject = $this->request->data['subject'];
	      $examtoenter = $this->request->data['examtoenter'];
	      $this->loadModel('Student');
	      $foundname = $this->Student->find('all', array(
		  'fields' => array('Student.id'),
		  'conditions' => array('Student.id =' => $registrationnumber)
	      ));
	      

	      
	      $students = $this->Student->findAllByRegistrationnumber($registrationnumber);
	      
	      if(file_exists("img/studentpics/".$students[0]['Student']['picturenumber'].".jpg") == true){
		  $webcampic = $students[0]['Student']['picturenumber'];
		  $this->set('webcampic', $students[0]['Student']['picturenumber']);
	      }else{
		  $webcampic = false;
		  $this->set('webcampic', $webcampic);
	      }
	      
	      
	      // Start process of checking if marksheet for the class has been created 
	      $this->loadModel('Marksheetcriterea');
	      $Marksheetcriterea = $this->Marksheetcriterea->findAllByExamnameAndYearAndClass($examtoenter,date("Y"),$students[0]['Student']['currentclass']);
	      
	      // if the marksheet has not been created perform these actions
	      if($Marksheetcriterea == null){
		  $this->loadModel('Mutexrail');
		  // Check if marksheet for a particular class is being created and wait for 3s to see if it is created
		  // if it has now been created break out of the while loop and feed the data passed to the student database
		  // otherwise if it not being created set the mutex to being created and start the creation of the marksheet
		  // thereafter unset the mutex for that class.
		  
		  if($this->Mutexrail->findAllByCreatingsheetAndClassAndExamnameAndYear(1,$students[0]['Student']['currentclass'],$examtoenter,date("Y")) != null){
		      while($this->Mutexrail->findAllByCreatingsheetAndClassAndExamnameAndYear(1,$students[0]['Student']['currentclass'],$examtoenter,date("Y")) != null){
			  sleep(3);
			  if(($this->Mutexrail->findAllByCreatingsheetAndClassAndExamnameAndYear(0,$students[0]['Student']['currentclass'],$examtoenter,date("Y")) != null) && ($this->Marksheetcriterea->findAllByExamnameAndYearAndClass($examtoenter,date("Y"),$students[0]['Student']['currentclass']) != null)){
			      break;
			  }else{
			      continue;
			  }
		      }
		      // compose a data array and feed in the values into the database
		      
		  }else{
			  // create mutex and set it to creating mode
			  $this->Mutexrail->create();
			  $data = array(
			      'Mutexrail' => array(
				  'creatingsheet' => 1,
				  'class' => $students[0]['Student']['currentclass'],
				  'examname' => $examtoenter,
				  'year' => date("Y")
			      )
			  );
		      
			  $this->Mutexrail->save($data);
		      
			  // start the creation of the marksheet for the particular class
		      
			  $classtocreate = $this->Student->find('all', array(
			      'fields' => array('Student.id'),
			      'conditions' => array('Student.currentclass =' => $students[0]['Student']['currentclass'])
			  ));
		      
			  // create the marksheets using the studentid's, class, examname and year
		      
			  foreach($classtocreate as $studentid){
			      $this->Olevelmarksheetresult->create();
			      $data = array(
				  'Olevelmarksheetresult' => array(
				      'student_id' => $studentid['Student']['id'],
				      'class' => $students[0]['Student']['currentclass'],
				      'exam_name' => $examtoenter,
				      'year' => date("Y")
				  )
			      );
			  
			      $this->Olevelmarksheetresult->save($data);
			  }
		      
			 // Create an entry into the Marksheetcriterea table to tell people that a marsheet for that exam has now been created
			 $this->Marksheetcriterea->create();
			 
			 $data = array(
			    'Marksheetcriterea' => array(
				'examname' => $examtoenter,
				'class' => $students[0]['Student']['currentclass'],
				'year' => date("Y")
			    )
			);
			
			$this->Marksheetcriterea->save($data);
		      
		      
			  // create mutex and set it to non-creating mode
			  //$this->Mutexrail->create();
			  // Use the previous mutex that you had created and change it creating mode to zero
			  // so that the next person does not recreate the sheet
		      
			  $createdmutex = $this->Mutexrail->findAllByCreatingsheetAndClassAndExamnameAndYear(1,$students[0]['Student']['currentclass'],$examtoenter,date("Y"));
		      
			  $data = array(
			      'Mutexrail' => array(
				  'id' => $createdmutex[0]['Mutexrail']['id'],
				  'creatingsheet' => 0,
				  'class' => $students[0]['Student']['currentclass'],
				  'examname' => $examtoenter,
				  'year' => date("Y")
			      )
			  );
		      
			  $this->Mutexrail->save($data);
		      
		      
		  }
		  $this->set('classtocreate',$createdmutex);
		  $this->set('examtoenter', $examtoenter);
		  $this->set('subjecttoenter', $subject);
		  $this->set('student', $students);
		  //$this->set('one', $foundname);
		  $this->render('entermarksforsinglestudent');
		  
	      }else{
		  // Compose a data array and feed the results into a database
		  //$this->Olevelmarksheetresult->create();
		  //if(($this->request->data['criterea'] === "All students")/* && ($this->request->data['class'] == 1)*/){
		  //    $studentsbyclass = $this->Student->findAllByCurrentclass(1, array(), array('Student.surname' => 'asc'));
		      
		 // }
		  
		  $this->set('examtoenter', $examtoenter);
		  $this->set('subjecttoenter', $subject);
		  $this->set('student', $students);
		  //$this->set('one', $foundname);
		  $this->render('entermarksforsinglestudent');
		  
	      }

	      
	      
	      //$classtocreate = $this->Student->find('all', array(
		  //'fields' => array('Student.id'),
		//  'conditions' => array('Student.currentclass =' => $students[0]['Student']['currentclass'])
	      //));

	      //$this->set('classtocreate', $classtocreate);
	      
	      
	  }else{
	      if(($this->request->data['criterea'] === "allstudents")/* && ($this->request->data['class'] == 1)*/){
$this->loadModel('Student');
		     //$studentsbyclass = $this->Student->findAllByCurrentclass(1, array(), array('Student.surname' => 'asc'));
	//$this->render('entermarksforsinglestudent');}else{	     
	if($this->request->data['classischecked'] === "1"){
	    switch($this->request->data['class']){
		case "1":
		   $studentsbyclass = $this->Student->findAllByCurrentclassAndAvailabilitystatus(1,"Present", array(), array('Student.surname' => 'asc'));
		    break;
		case "2":
		
		    break;
		case "3":
		
		    break;
		case "4":
		
		    break;
	    
	    }
	
	
	$objPhpExcel  = $this->PhpExcel->createWorksheet()
			    ->setDefaultFont('Calibri', 12);
			    
	// define table cells
	$table = array(
	    array('label' => __('User'), 'filter' => true),
	    array('label' => __('Type'), 'filter' => true),
	    array('label' => __('Date')),
	    array('label' => __('Description'), 'width' => 50, 'wrap' => true),
	    array('label' => __('Modified'))
	);


	// add heading with different font and bold text
	$this->PhpExcel->addTableHeader($table, array('name' => 'Cambria', 'bold' => true));
	// close table and output
	
	//Start protecting cells
	$objSheet = $objPhpExcel->getActiveSheet();
	
	//PROTECT THE CELL RANGE
	$objSheet->protectCells('A1:B1', 'PHP');
	
	// UNPROTECT THE CELL RANGE
	$objSheet->getStyle('A2:E2')->getProtection()->setLocked(PHPExcel_Style_Protection::PROTECTION_UNPROTECTED);
	
	// PROTECT THE WORKSHEET SHEET
	$objSheet->getProtection()->setSheet(true);
	
	$objValidation = $objPhpExcel->getActiveSheet()->getCell('B2')
    ->getDataValidation();
$objValidation->setType( PHPExcel_Cell_DataValidation::TYPE_WHOLE );
$objValidation->setErrorStyle( PHPExcel_Cell_DataValidation::STYLE_STOP );
$objValidation->setAllowBlank(true);
$objValidation->setShowInputMessage(true);
$objValidation->setShowErrorMessage(true);
$objValidation->setErrorTitle('Input error');
$objValidation->setError('Number is not allowed! Please enter a number from 0 to 100');
$objValidation->setPromptTitle('Allowed input');
$objValidation->setPrompt('Only numbers between 0 and 100 are allowed.');
$objValidation->setFormula1(0);
$objValidation->setFormula2(100);
	
	$this->PhpExcel->addTableFooter();
	    //->output();
	
	
	$objPhpExcel->output('output.xlsx','Excel2007');	
	
		     
		     $this->Session->setFlash(__('Successfully created a file for you to enter your marks'));
		     $this->render('entermarks'); 
	      }
	  
	  }
	  //$this->redirect(array('action' => 'entermarks'));
    	}
    	
    	//$fileName = './output.xlsx';
    	

	
	
        //$objPhpExcel = $this->PhpExcel->loadWorksheet($fileName);
        

	


	
	// add data
	/*foreach ($data as $d) {
	    $this->PhpExcel->addTableRow(array(
		$d['User']['name'],
		$d['Type']['name'],
		$d['User']['date'],
		$d['User']['description'],
		$d['User']['modified']
	    ));
	}
	*/


	//$this->set('excelfile', $objPhpExcel);

	//$objPHPExcel = $objReader->load("05featuredemo.xlsx");
        // debug
        //var_dump($objPhpExcel);
   }
    
    }
    
    public function entermarksforsinglestudent(){
	  $this->render('index');
    }
    
    public function checkifnumber(){
	/*$ajax1 = $this->request->data['Student']['picturenumber'];
	//$ajax = $ajax + 1;
	//$ajax1 = $ajax;
	if($ajax1 != null){
	      $this->set('ajax1', $ajax1);
	}else{
	      $this->set('ajax1', "here we are");
	}
	$this->layout = 'ajax';
	$this->render('checkifnumber');
	*/
    }

    public function add_olevel() {
	/*
	if ($this->request->is('post')) {
	    $this->Student->create();
	    
	    if($this->request->data['Student']['picture'] != ""){
		$encoded_data = $this->request->data['Student']['picture'];
		$binary_data = base64_decode($encoded_data);

		// save to server (beware of permissions)
		$result = file_put_contents( 'img/studentpics/'.$this->request->data['Student']['picturenumber'].'.jpg', $binary_data );
		$this->request->data['Student']['picture'] = "";
		$this->request->data['Student']['studenthaspic'] = "YES";
	    }
	    
	    $this->request->data['Student']['fullnames'] = $this->request->data['Student']['surname']." ".$this->request->data['Student']['othernames'];
	    
	    if ($this->Student->saveAssociated($this->request->data)) {
		$this->Session->setFlash(__('The student was sucessfully added to the database'));
		return $this->redirect(array('action' => 'index'));
	    }else{
		//$this->Session->setFlash(__('Unable to add the student to the database'));
	    }
	}
	
	
	$this->loadModel('Number');
	$currentnumber = $this->Number->findById(1);
	if($currentnumber['Number']['currentyear'] != date('Y')){
	    $newnumbertobeused = 1;
	    $newnumbertobeused = sprintf("%04d", $newnumbertobeused);
	    $data =  array('id' => 1, 'lastnumberused' => $newnumbertobeused, 'currentyear' => date('Y'));
	    $this->Number->save($data);
	    $this->set('lastnumberused', 1);
	    $this->set('currentyear', date('Y'));
	}else{
	    $newnumbertobeused = $currentnumber['Number']['lastnumberused'] + 1;
	    $newnumbertobeused = sprintf("%04d", $newnumbertobeused);
	    $data =  array('id' => 1, 'lastnumberused' => $newnumbertobeused);
	    $this->Number->save($data);
	    $this->set('lastnumberused', $newnumbertobeused);
	    $this->set('currentyear', date('Y'));
	}
	*/
    }

    public function add_alevel() {
	/*
	//if($this->Auth->user('role') != 'admin'){
	//	$this->Session->setFlash(__('You do not have the permissions to do this, Please contact an administrator.'));
	//	return $this->redirect(array('action' => 'index'));
	//}else{
	if ($this->request->is('post')) {
	    $this->Student->create();
	    
	    if($this->request->data['Student']['picture'] != ""){
		$encoded_data = $this->request->data['Student']['picture'];
		$binary_data = base64_decode($encoded_data);

		// save to server (beware of permissions)
		$result = file_put_contents( 'img/studentpics/'.$this->request->data['Student']['picturenumber'].'.jpg', $binary_data );
		$this->request->data['Student']['picture'] = "";
		$this->request->data['Student']['studenthaspic'] = "YES";
	    }
	    if ($this->Student->saveAssociated($this->request->data)) {
		$this->Session->setFlash(__('The student was sucessfully added to the database'));
		return $this->redirect(array('action' => 'index'));
	    }else{
		//$this->Session->setFlash(__('Unable to add the student to the database'));
	    }
	}
	
	$this->loadModel('Number');
	$currentnumber = $this->Number->findById(1);
	if($currentnumber['Number']['currentyear'] != date('Y')){
	    $newnumbertobeused = 1;
	    $newnumbertobeused = sprintf("%04d", $newnumbertobeused);
	    $data =  array('id' => 1, 'lastnumberused' => $newnumbertobeused, 'currentyear' => date('Y'));
	    $this->Number->save($data);
	    $this->set('lastnumberused', 1);
	    $this->set('currentyear', date('Y'));
	}else{
	    $newnumbertobeused = $currentnumber['Number']['lastnumberused'] + 1;
	    $newnumbertobeused = sprintf("%04d", $newnumbertobeused);
	    $data =  array('id' => 1, 'lastnumberused' => $newnumbertobeused);
	    $this->Number->save($data);
	    $this->set('lastnumberused', $newnumbertobeused);
	    $this->set('currentyear', date('Y'));
	}
	//}
	*/
    }

    public function edit($id = null) {
	/*
	if (!$id){
	    throw new NotFoundException(__('Invalid Student'));
	}
	$students = $this->Student->findById($id);
	if (!$students){
	    throw new NotFoundException(__('Invalid Student'));
	}
	if ($this->request->is(array('post', 'put'))){
	    $this->Student->id = $id;

	    if($this->request->data['Student']['picture'] != ""){
		$encoded_data = $this->request->data['Student']['picture'];
		$binary_data = base64_decode($encoded_data);

		//first delete the file from the specified location if it exists
		$path = "img/studentpics/".$this->request->data['Student']['picturenumber'].".jpg";
		if(file_exists($path) == true){
		    unlink($path);
		}
		// save to server (beware of permissions)	
		$result = file_put_contents( 'img/studentpics/'.$this->request->data['Student']['picturenumber'].'.jpg', $binary_data );
		$this->request->data['Student']['picture'] = "";
		$this->request->data['Student']['studenthaspic'] = "YES";
	    }

	    if ($this->Student->saveAssociated($this->request->data)){
		$this->Session->setFlash(__('Records for %s %s, Registration number: %s have been been updated.',
					    $this->request->data['Student']['surname'], 
					    $this->request->data['Student']['othernames'], 
					    $this->request->data['Student']['registrationnumber']));
		return $this->redirect(array('action' => 'index'));
	    }
	    $this->Session->setFlash(__('Unable to update Student Records.'));
	}

	if (!$this->request->data){
	    $this->request->data = $students;
	}

	if(file_exists("img/studentpics/".$students['Student']['picturenumber'].".jpg") == true){
	    $webcampic = $students['Student']['picturenumber'];
	    $this->set('webcampic', $students['Student']['picturenumber']);
	}else{
	    $webcampic = false;
	    $this->set('webcampic', $webcampic);
	}
	*/
    }

    public function delete($id){
	/*
	if ($this->request->is('get')){
	    throw new MethodNotAllowedException();
	}
	$students = $this->Student->findById($id);
	$path = "img/studentpics/".$students['Student']['picturenumber'].".jpg";
	if(file_exists($path) == true){
	    unlink($path);
	}
	if ($this->Student->delete($id)){
		$this->Session->setFlash(__('Records for %s %s, Registration number: %s have been been deleted.',
					    $students['Student']['surname'], 
					    $students['Student']['othernames'], 
					    $students['Student']['registrationnumber']));
	    return $this->redirect(array('action' => 'index'));
	}else{
	    $this->Session->setFlash(__('Had a slight problem trying to delete Student Records.'));
	    return $this->redirect(array('action' => 'index'));
	}
	*/
    }
}
?>
